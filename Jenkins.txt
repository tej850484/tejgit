

Continuious Integration
=============================
Stage 1 (Continuous Downlaod)
==============================
Developers create some code and upload it into some version
controlling system like Git.Jenkins should immediately download
that code and this is called continuous download

Stage 2 Continuous Build
=============================
The code downloaded in the previous stage has to coverted into a
setup file commonly know as artifact.This artifcat can be in the format
of jar,war,ear file etc.To trigger this build process jenkins uses 
build tools like Maven,Grade,Msbuild etc.This stage is called continuous
build

Stage 3 (Continuous Deployment)
==================================
The artifact in the previous stage has to deployed into the testing
environment.This testing servers might be running on some application
servers like tomcat,Weblogic etc.Once it is deployed here it become
available to the testers.This is called continuous deployment

Stage 4 (Continuous Testing)
================================
Testers create automation test scripts uisng tools like Seleniumm,Codedui
etc.Jenkins now executes these automation testin scripts and check if the 
application is working correctly or no.If it not working jenkins will send
email notifications to the corresponding team members.Develeopers will
fix the defects and upload the modifed code into git,Jenkins will again
start from stage 1

Stage 5 (Continuous delivery)
=============================
If testing passes jenkins will deploy tha artifact into the production
servers form where the end user or client can start accessing it
This is called continuous delivery

Stage1-4 are called as CI (Continuous Integration)
Stage 5 is called as CD (Continuous Delivery)
====================================================================
Day 2
====================================================================
JenkinServer
=================
1 JDK
2 Git,Maven
3 Jenkins


QAServer and ProdServer
============================
1 Tomcat9
2 Tomcat9-admin

===========================================================
Setup of servers for CI-CD
=====================================
1 Create 3 AWS ubuntu instances
  and name them Jenkinsserver,QAServer,ProdServer

Installing Jenkins
==========================
1 Connect to JEnkins server using Git bash

2 Update the apt repoistory
  sudo apt-get update

3 Install jdk
  sudo apt-get install -y openjdk-8-jdk

4 Install git and maven
  sudo apt-get install -y git maven

5 Download jenkins.war
  wget https://get.jenkins.io/war-stable/2.263.4/jenkins.war

6 To start jenkins
  java -jar jenkins.war

7 To access jenkins from browser
  public_ip_of_jenkinsserver:8080

8 Unlock jenkins by entering the first admin password

9 Click on Install suggested plugins

10 Create first admin user

11 Click on Continue--->Finish

==============================================================
Setting up tomcat on QA and ProdServer
==============================================================
1 Connect to QAServer AWS instance using git bash

2 Update the apt repository
  sudo apt-get update

3 Install tomcat9
  sudo apt-get install -y tomcat9

4 Install tomcat9-admin
  sudo apt-get isntall -y tomcat9-admin

5 Edit the tomcat-users.xml file
  sudo vim /etc/tomcat9/tomcat-users.xml
  Delete the entire content of the file and copy paste the below content
 
  <tomcat-users>
       <user username="intelliqit" password="intelliqit" roles="manager-script"/>
  </tomcat-users>

6 Restart tomcat
  sudo service tomcat9 restart

Repeat the above 6 steps on the Prodserver AWS instance

===============================================================================
Day 3
===============================================================================
Stage 1 (Continuous Download)
====================================
1 Open the dashboard of Jenkins
2 Click on New item---->enter item name as "Development"
3 Select Free style project---->OK
4 Go to Source code management
5 Select Git
8 Enter github url where developers have uploaded the code
  https://github.com/intelliqittrainings/maven.git
9 Click on Apply--->Save
10 Go to the dashboard of Jenkins
11 Click on Build icon
   This job will download all the code from github repository
   into the Jenkinsserver AWS instance

----------------------------------------------------------------------
Stage 2 (Continuous Build)
================================
1 Open the dashboard of Jenkins
2 Go to the Development job--->Click on Configure
3 Go to Build section
4 Click on "Add build step"
5 Click on "Invoke top level maven target"
6 Enter Goal as: package
7 Apply--->Save
8 Go to the dashboard of Jenkins
9 Go to the Development job and click on Build icon
  This job will conver the code into an artifact and this artifact
  comes in the format of a war file

------------------------------------------------------------------------
Stage 3 (Continuous Deployment)
====================================
1 Open the dashboard of Jenkins
2 Click on Manage Jenkins
3 Click on Manage Plugins
4 Go to Available section
5 Search for "Deploy to container" plugin
6 Click on Install without restart
7 Go to the dashoard of jenkins
8 Go to the Development job
9 Click on Configure
10 Go to Posy build actions
11 Click on Add post build action
12 Click on Deploy war/ear to containers
   war/ear file: **\*.war
   Context path: qaapp
   Click on Add contianer
   Select tomcat9
   Enter tomcat credentials
   Tomcat url: private_ip_qaserver:8080
13 Apply--->Save
14 Go to the dashboard of jenkins
15 Go to the development job---->Click on build
   This job will deploy the artifact into the QAServers
   and to access the application from the level of browser
   public_ip_qaserver:8080/qaapp

===============================================================
Day 3
===============================================================
Stage 4 (Continuous Testing)
===================================
1 Open the dashbord of Jenkins
2 Click on New item--->Enter item name as "Testing"
3 Select Free style project--->OK
4 Go to Source Code Management
5 Select Git
6 Enter the github url where testers have uploaded the 
  selenium test scripts
  https://github.com/intelliqittrainings/FunctionalTesting.git
7 Go to Build section
8 Click on Add build step
9 Click onExecute shell
  java -jar path_where_testing.jar_is_downloaded
10 Apply---->Save
11 Go to the dashboard of Jenkins
11 Go to the Testing job---->Click on Build icon
   This job will download the selenium test scripts and execute them

=========================================================================
Linking the Development job with the Testing job
----------------------------------------------------
1 Open the dashboard of Jenkins
2 Go to Development job---->Configure
3 Go to Post build actions
4 Click on Add post build action
5 Click on Build other projects
6 Enter project name as "Testing"
7 Click on Save
   Now if we run the Development job it will run the first three stages
  of CI-CD and then it will call the Testing job which will run the
  fourth stage

==================================================================
Copying artifacts from Development job to Testing job
=========================================================
1 Open the dashboard of Jenkins
2 Click on Manage Jenkins--->Manage plugins
3 Go to Availbale section--->Search for "Copy Artifact" plugun
4 Click on Install without restart
5 Go to the dashboard of Jenkins
6 Go to the Development job--->Click on Configure
7 Go to Post build actions
8 Click on Add post build actions
9 Click on Archive the artifacts
10 Enter files to be archived as **\*.war
11 Click on Apply--->>Save
12 Go to the dashboard of jenkins
13 Go to the Testing job---->Click on configure
14 Go to Build section
15 Click on Add build step
15 Click on Copy artifacts from other project
16 Enter project name as "Development"
17 Apply---->Save
================================================================
Stage 5 (Continuous Delivery)
===================================
1 Open the dashboard of jenkins
2 Go to Testing job--->Configure
3 Go to Post build actions
4 Click on Add post build action
5 Click on Deploy war/ear to container
  war/ear files: **\*.war
  contextpath: prodapp
  Click on Add container
  Select tomcat9
  Enter username and password of tomcat9
  Romcat url: private_ip_of_prodserver:8080
6 Apply---->Save

===============================================================
Day 4
================================================================
====================================================================
User Administration in Jenkins
===========================================

Creating users in Jenkins
===========================
1 Open the dashboard of jenkins
2 click on manage jenkins
3 click on manage users
4 click on create users
5 enter user credentials

Creating roles and assigning permissions
===============================================
1 Open the dashboard of jenkins
2 click on manage jenkins
3 click on manage plugins
4 click on role based authorization strategy plugin
5 install it
6 go to dashboard-->manage jenkins
7 click on configure global security
8 check enable security checkbox
9 go to authorization section-->click on role based strategy  radio button
10 apply-->save
11 go to dashboard of jenkins
12 click on manage jenkins
13 click on manage and assign roles
14 click on mange roles
15 go to global roles and create a role "employee"
16 for this employee in overall give read access
   and in view section give all access
17 go to item roles-->Give the role as developer
   and patter as Dev.* (ie developer role can access
   only those jobs whose name start with Dev)
18 similarly create another role as tester and assign the pattern as "Test.*"
19 give all permissions to developrs and tester
20 apply--save
21 click on assign roles
22 go to global roles and add user1 and user2 
23 check user1 and user2 as employees
24 go to item roles
25 add user1 and user2
26 check user1 as developer and user2 as tester
27 apply-->save
If we login into jenkins as user1 we can access only the development 
related jobs and user2 can access only the testing related jobs

============================================================================


==============================================








================================================
Alternate ways of Setup of Jenkins
==============================================
1 Update the apt reposiotry and install java
  sudo apt-get update

  sudo apt-get install -y openjdk-8-jdk

2 Add the jenkins repository key to the apt repository
  wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key 
                                                     | sudo apt-key add -

3 Add the debain repository address to jenkins.list file
  sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > 
                                     /etc/apt/sources.list.d/jenkins.list'

4 Update the apt repository
  sudo apt-get update

5 Install jenkins
  sudo apt-get install -y jenkins

===============================================================================
Setup of jenkins on tomcat
================================
1 Update the apt repository
  sudo apt-get update

2 Install tomcat9
  sudo apt-get install -y tomcat9

3 Install tomcat9-admin
  sudo apt-get install -y tomcat9-admin

4 Download jenkins.war
  wget https://get.jenkins.io/war-stable/2.277.1/jenkins.war

5 Copy the jenkins.war into tomcat webapps folder
  sudo cp jenkins.war /var/lib/tomcat9/webapps

6 To access tomcat from browser
  public_ip:8080

7 To access jenkins running on tomcat
  public_ip:8080/jenkins

==========================================================================
Day 5
===========================================================================
MAster Slave Architecture of Jenkins
============================================
This is used distribute the work load to additional linux
servers called as slaves.This is used when we want to run multiple 
jobs on jenkins parallelly.

Setup
============
1 Create a new AWS ubuntu20 instance

2 Install the same version of java as present in the master
  sudo apt-get update
  sudo apt-get install -y openjdk-8-jdk

3 Setup passwordless SSH betwen Master and slave
  a) Connect to slave and set password to default user
     sudo passwd ubuntu
  b) Edit the ssh config file
     sudo vim /etc/ssh/sshd_config
     Search for "PasswordAuthentication" and change it from no to yes
  c) Restart ssh
     sudo service ssh restart
  d) Connect to Master using git bash
  e) Generate the ssh keys
     ssh-keygen
  f) Copy the ssh keys
     ssh-copy-id ubuntu@private_ip_of_slave
     This will copy the content of the public keys to a file called
     "authorised_keys" on the slave machine


  Connect to slave using git bash
4 Downlaod the slave.jar file
  wget http://private_ip_of_jenkinsserver:8080/jnlpJars/slave.jar

5 Give execute permissions to the slave.jar
  chmod u+x slave.jar

6 Create an empty folder that will be the workspace of jenkins
  mkdir workspace

7 Open the dashboard of Jenkins
  
8 Click on Manage Jenkins--->Click on Manage Nodes and Clouds

9 Click on New node---->Enter some node name as Slave1

10 Select Permanant Agent--->OK

12 Enter remote root directory as /home/ubuntu/workspace

13 Labels: myslave (This label is associated with a job in jenkins
   and then that job will run on that slave)

14 Go to Launch Method and select "Launch agent via execution of command on master"

15 Click on Save

16 Go to the dashboard of Jenkins

17 Go to the job that we want to run on slave---->Click on Configure

18 Go to General section

19 Check restrict where this project can be run

20 Enter slave label as myslave


========================================================================
Day 6
==========================================================================
Pipeline as Code
===========================
This is the process of implementing all stages of CI-CD from the level
of a Groovy script file called as "Jenkinsfile".

Advantages
=================
1 Since all the stages of CI-Cd are controlled from the level of
a program which is uploaded into git, it give all the team members the
ability to review and modify the code and still we can maintain
multiple versions and toggle between those versions

2 Pipeline scripts can withstand planned and unplanned restarts of the
Jenkins master

3 Pipeline scripts can do all the stages of CI-CD with minumum number of
plugins so their performance is faster

4 We can handle complex real time scenarios like failure conditions
if conditions,loop etc

========================================================================
Pipeline as Code can be implemented in 2 ways
1 Scripted Pipeline
2 Declarative Pipeline

Scripted Pipeline Syntax
==============================
node('master/slave')
{
   stage('Stage name ins CI-CD')
   {
      Actual groovy code to implement this stage
   }
}

Declarative Pipeline
================================
pipeline
{
  agent any
  stages
  {
    stage('Stage in CI-CD')
    {
      steps
      {
        Actual groovy code to implement this stage
      }
    }
  }
}

=======================================================================
Scripted Pipeline
======================
1 Open the dashboard of Jenkins
2 Click on New item--->Enter some item name (ScriptedPipeline)
3 Select Pipeline job--->Ok
4 Go to the Pipeline Section
5 Create the below code
node('master')
{
   stage('ContinuousDownload') 
   {
       git 'https://github.com/intelliqittrainings/maven.git'    
   }
   stage('ContinuousBuild')
   {
       sh 'mvn package'
   }
}

=========================================================================
Day 7
=========================================================================

node('master')
{
   stage('ContinuousDownload') 
   {
       git 'https://github.com/intelliqittrainings/maven.git'    
   }
   stage('ContinuousBuild')
   {
       sh 'mvn package'
   }
   stage('ContinuousDeployment')
   {
       deploy adapters: [tomcat9(credentialsId: 
	    '94b1a16a-6291-4d40-ae49-08b5c75ef112', 
		path: '', url: 'http://172.31.30.86:8080')], 
		contextPath: 'testapp', war: '**/*.war'
   }
   stage('ContinuousTesting')
   {
       git 'https://github.com/intelliqittrainings
	                                          /FunctionalTesting.git'
       sh 'java -jar /home/ubuntu/.jenkins/workspace
	                                    /ScriptedPipeline/testing.jar'
       
   }
   stage('ContinuousDelivery')
   {
       input message: 'Waiting for Approval from DM!', 
	                                         submitter: 'srinivas'
       deploy adapters: [tomcat9(credentialsId: 
	        '94b1a16a-6291-4d40-ae49-08b5c75ef112', 
			 path: '', url: 'http://172.31.18.115:8080')],
			 contextPath: 'prodapp', war: '**/*.war'
   }
}
===================================================================\
Scripted pipeline using scp for deployment rather that deploy to container plugins

node('master')
{
   stage('ContinuousDownload') 
   {
       git 'https://github.com/intelliqittrainings/maven.git'    
   }
   stage('ContinuousBuild')
   {
       sh 'mvn package'
   }
   stage('ContinuousDeployment')
   {
       sh 'scp /home/ubuntu/.jenkins/workspace/ScriptedPipeline1/webapp/target/webapp.war ubuntu@172.31.30.86:/var/lib/tomcat9/webapps/testapp.war'
   }
   stage('ContinuousTesting')
   {
       git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
       sh 'java -jar /home/ubuntu/.jenkins/workspace/ScriptedPipeline1/testing.jar'
       
   }
   stage('ContinuousDelivery')
   {
       sh 'scp /home/ubuntu/.jenkins/workspace/ScriptedPipeline1/webapp/target/webapp.war ubuntu@172.31.18.115:/var/lib/tomcat9/webapps/prodapp.war'
      
   }
   
   
   
}


=========================================================================
Day 8
\==-========================================================================
Developers activity
==========================
1 Clone the remote maven code
  git clone https://github.com/intelliqittrainings/maven.git

2 Go into the maven folder and delete the .git folder
  cd maven
  rm -rf .git

3 Initilise a new git repo,send it to stagging and local repository
  git init
  git add .
  git commit -m "a"

4 Push this repository to git hub
  Open github
  Create a new reposiotry here
  Push the ocde from local repository to remote repostory

6 Locally create a file called Jenkinsfile and copy paste the groovy code
  vim Jenkinsfile
  Copy paste the Pipeline code here

7 Stage it,send it to local repository and send it remote github

==============================================================================
JenkinsAdmin Activity
=============================
1 Open the dashboard of Jenkins
2 Click on New item---->Enter some item name
3 Select Pipeline--->OK
4 Go to Pipleine section--->Definition--->Select Pipeline script from sCM
5 Select Git
6 Enter the github url where developers have uploaded the code along
  with the Jenkins file
7 Go to Build triggers--->Click on Build periodically
  Schedule: * * * * *
8 Apply---->Save
  Now if the Developer makes any changes to the code and uploads those changes
  to github then Jenkinsfile from the level of Github will trigger all
  stages of ci-cd

=============================================================================

Declarative Pipeline
========================
pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
                git 'https://github.com/intelliqittrainings/maven.git'
            }
        }
        stage('ContinuousBuild')
        {
            steps
            {
              sh label: '', script: 'mvn package'
            }
                
        }
        stage('ContinuousDeployment')
        {
            steps
            {
                sh label: '', script: 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.31.15:/var/lib/tomcat8/webapps/testwebapp.war'
            }
            
        }
        stage('ContinuousTesting')
        {
            steps
            {
                git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
                sh label: '', script: 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline/testing.jar'
            }
        }
        stage('ContinuousDelivery')
        {
           steps
           {
               input message: 'Waiting for Approval from the DM!', submitter: 'naresh'
               sh label: '', script: 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.26.41:/var/lib/tomcat8/webapps/prodwebapp.war'
           }
        }
    }
    
}

=============================================================================
Day 9
============================================================================
Declarative Pipeline with Post conditions
============================================
pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
                git 'https://github.com/intelliqittrainings/maven.git'
            }
        }
         stage('ContinuousBuild')
        {
            steps
            {
                sh label: '', script: 'mvn package'
            }
        }
        stage('ContinuousDeployment')
        {
            steps
            {
                sh label: '', script: 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.31.15:/var/lib/tomcat8/webapps/testwebapp.war'
            }
        }
        stage('ContinuousTesting')
        {
            steps
            {
                git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
                sh label: '', script: 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline/testing.jar'
            }
        }
       
    }
    post
    {
        success
        {
            input message: 'Waiting for Approval!', submitter: 'naresh'
               sh label: '', script: 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.26.41:/var/lib/tomcat8/webapps/prodwebapp.war' 
        }
        failure
        {
            mail bcc: '', body: '', cc: '', from: '', replyTo: '', subject: 'Jenkins CI-CD Failed', to: 'gandham.saikrishna@gmail.com'
        }
       
            
    
    }
    
    
    
}

=========================================================================
Declarative Pipeline with exception habdling(try-catch)
==========================================================
pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
                script
                {
                   try
                   {
                       git 'https://github.com/intelliqittrainings/maven.git'
                   }
                   catch(Exception e1)
                   {
                       mail bcc: '', body: 'Jenkins is unable to download from remote github', cc: '', from: '', replyTo: '', subject: 'Download failed', to: 'gitadmin@outlook.com'
                       exit(1)
                   }
                }
               
            }
        }
         stage('ContinuousBuild')
        {
            steps
            {
                script
                {
                   try
                   {
                       sh label: '', script: 'mvn package'
                   }
                   catch(Exception e2)
                   {
                       mail bcc: '', body: 'Jenkins is unable to create an artifact from the code', cc: '', from: '', replyTo: '', subject: 'Build failed', to: 'developers@outlook.com'
                      exit(1)
                   }
                }
               
            }
        }
        stage('ContinuousDeployment')
        {
            steps
            {
                script
                {
                   try
                   {
                      sh label: '', script: 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.31.15:/var/lib/tomcat8/webapps/testwebapp.war'
                   }
                   catch(Exception e3)
                   {
                       mail bcc: '', body: 'Jenkins is unable to deploy into tomcat on the QaServers', cc: '', from: '', replyTo: '', subject: 'Deployment failed', to: 'middleware@outlook.com'
                       exit(1)
                   }
                }
                
            }
        }
        stage('ContinuousTesting')
        {
            steps
            {
                script
                {
                                    
                    try
                    {
                        git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
                       sh label: '', script: 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline/testing.jar'
                    }
                    catch(Exception e4)
                    {
                       mail bcc: '', body: 'Functional testing of the app on QAServers failed', cc: '', from: '', replyTo: '', subject: 'Testing failed', to: 'testers@outlook.com'
                       exit(1)
                    }
                }
                
            }
        }
        stage('ContinuousDelivery')
        {
            steps
            {
                script
                {
                   try
                   { 
                        input message: 'Waiting for Approval!', submitter: 'naresh'
                        sh label: '', script: 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.26.41:/var/lib/tomcat8/webapps/prodwebapp.war' 
                    }
                    catch(Exception e5)
                    {
                         mail bcc: '', body: 'Unable to deploy into ProdServers', cc: '', from: '', replyTo: '', subject: 'Delivery failed', to: 'delevery@outlook.com'
                    }
                }
            }
        }
       
    }
  
       
            
    
 
    
    
    
}

=====================================================================================
Day 10
===================================================================================
=================================================================================
Cat Light Notifications
---------------------------------
Catlight is a third party s/w that is used to get notification from
Jenkins in the form of pop up msgs
Catlight is a client side s/w and it has to be installed on every
team members machines

1 Download and install cat light
  https://catlight.io/downloads

2 Select the continuous integration tool as Jenkins

3 Enter the public ip_of_jenkinserver:8080

5 Enter the username and password of Jenkins

6 Select the jobs for which we want notifications

==========================================================================
Day 11
===========================================================================
 
Multi Branch Pipeline
=========================
Generally developers create multiple branches and upload
code related to various functionalities on these branches
We have to configure Jenkins in such a way that it triggers
CI-CD process for all these branches parallelly.

To do this we need to have a copy of JEnkinsfile on each branch
and then based on the instructuions in the Jenkinsfile all
the stages have to be triggered

=======================================================================
Developers Activity
=========================
1 Clone the maven repository
  git clone https://github.com/intelliqittrainings/maven.git

2 Move into this cloned repository and delete .git folder
  cd maven
  rm -rf .git

3 Initilise a new git repository
  git init

4 Send the files into stagging area and local repository
  git add .
  git commit -m "a"

5 Create a jenkins file and put the stages of CI that should happen 
  on master  branch
  vim Jenkinsfile

6 Send it to stagging and local repository
  git add .
  git commit -m "b"

7 Create a new branch called loans and create  a new Jenkinsfile
  git checkout -b loans
  vim Jenkinsfile
  Use the CI instructions that should be done on Loans branch

8 Send this to stagging and local repoistory
  git add .
  git commit -m "c"

9 Open github.com---->Create a new repository

10 Push all the branches from local machine to remote github
   git push origin --all

Jenkins Admin Activity
==============================
1 Open the dashboard of Jenkins

2 Click on New item---->Enter item name as MultBranchPipeline

3 Select MultiBranchPipeline--->OK

4 Go to Branch Sounrces---->Select Git-->enter github url where developers
  uploaded the code

5 Go to Scan Multi branch pipeline triggers---->Select 1 minute

6 Apply--->Save
==================================================================

=======================================================================
Webhooks 
===========
This is  used to send notifications from github to jenkins
Whenever any code changes are done and that is checkdin into
github, webhook will send an immediate notifiction to JEnkins
and Jenkins will triggern the job

1 Open github.com---->Click on the reposiotry that we are working on
2 On the right corner clikc on Setting
3 Click on Webhooks in the left pannel
4 Click on Add Webhook
5 In Payload URL: http://public_ip_jenkinsserver:8080/github-webhook/
6 In Content type select :application/json
7 Click on Add Webhook
8 Open the dashboaard of Jenkins
9 Go to the job that we want to configure
10 Go to Build triggers
11 Check GitHub hook trigger for GITScm polling
12 Click on Apply--->Save
   Now if we make any changes to the code in github then github
  will send an notification to jenkins and jenkins will run that job

























    































































 